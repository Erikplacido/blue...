version: '3.8'

services:
  # Aplicação principal
  app:
    build: 
      context: .
      dockerfile: Dockerfile
      args:
        - APP_ENV=${APP_ENV:-production}
        - STRIPE_PUBLISHABLE_KEY=${STRIPE_PUBLISHABLE_KEY}
        - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
        - SENTRY_DSN=${SENTRY_DSN}
    container_name: blue-cleaning-app
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./logs:/var/www/html/logs
      - ./cache:/var/www/html/cache
      - ./assets/uploads:/var/www/html/assets/uploads
      - ./ssl:/etc/ssl/certs/blue-cleaning:ro
    environment:
      - APP_ENV=${APP_ENV:-production}
      - DB_HOST=db
      - DB_NAME=${DB_NAME:-blue_cleaning}
      - DB_USER=${DB_USER:-blue_user}
      - DB_PASS=${DB_PASS}
      - REDIS_HOST=redis
      - STRIPE_PUBLISHABLE_KEY=${STRIPE_PUBLISHABLE_KEY}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - SENTRY_DSN=${SENTRY_DSN}
      - MAIL_HOST=${MAIL_HOST}
      - MAIL_PORT=${MAIL_PORT:-587}
      - MAIL_USER=${MAIL_USER}
      - MAIL_PASS=${MAIL_PASS}
      - MAIL_ENCRYPTION=${MAIL_ENCRYPTION:-tls}
    depends_on:
      - db
      - redis
    networks:
      - blue-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/api/health.php"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Banco de dados MySQL
  db:
    image: mysql:8.0
    container_name: blue-cleaning-db
    environment:
      - MYSQL_ROOT_PASSWORD=${DB_ROOT_PASS}
      - MYSQL_DATABASE=${DB_NAME:-blue_cleaning}
      - MYSQL_USER=${DB_USER:-blue_user}
      - MYSQL_PASSWORD=${DB_PASS}
      - MYSQL_CHARSET=utf8mb4
      - MYSQL_COLLATION=utf8mb4_unicode_ci
    volumes:
      - db_data:/var/lib/mysql
      - ./docker/mysql/init:/docker-entrypoint-initdb.d
      - ./docker/mysql/conf.d:/etc/mysql/conf.d
    ports:
      - "3306:3306"
    networks:
      - blue-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${DB_ROOT_PASS}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis para cache e sessões
  redis:
    image: redis:7-alpine
    container_name: blue-cleaning-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/etc/redis/redis.conf
    command: redis-server /etc/redis/redis.conf
    networks:
      - blue-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx como proxy reverso (opcional)
  nginx:
    image: nginx:1.24-alpine
    container_name: blue-cleaning-nginx
    ports:
      - "8080:80"
      - "8443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/sites:/etc/nginx/conf.d
      - ./ssl:/etc/ssl/certs/blue-cleaning:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - app
    networks:
      - blue-network
    restart: unless-stopped
    profiles:
      - proxy

  # Elasticsearch para logs (opcional)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: blue-cleaning-elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - blue-network
    restart: unless-stopped
    profiles:
      - logging

  # Kibana para visualização de logs (opcional)
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: blue-cleaning-kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - blue-network
    restart: unless-stopped
    profiles:
      - logging

  # Prometheus para métricas (opcional)
  prometheus:
    image: prom/prometheus:latest
    container_name: blue-cleaning-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - blue-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana para dashboards (opcional)
  grafana:
    image: grafana/grafana:latest
    container_name: blue-cleaning-grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASS:-admin123}
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    networks:
      - blue-network
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  db_data:
    driver: local
  redis_data:
    driver: local
  elasticsearch_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  blue-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
